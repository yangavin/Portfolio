---
import { contentfulClient } from "../lib/contentful";
import { documentToHtmlString } from "@contentful/rich-text-html-renderer";
import type { EntryFieldTypes } from "contentful";

type paragraphs = {
  contentTypeId: "paragraphs";
  fields: {
    content: EntryFieldTypes.RichText;
  };
};

const content = await contentfulClient.getEntry<paragraphs>(
  "5AiBzb1VpHv56DVdAJBhCH",
);
---

<div class="relative px-8">
  <img
    src="yellow-cylinder.svg"
    class="yellow-cylinder absolute left-0 top-1/3 -z-10"
    alt=""
  />
  <img
    src="red-ellipse.svg"
    class="red-ellipse absolute right-0 top-2/3 -z-10"
    alt=""
  />
  <h1 class="mb-10 text-[11vw]">About Me</h1>
  <div
    class="clamp-text relative m-auto flex max-w-[55ch] flex-col gap-[3ch]"
    set:html={documentToHtmlString(content.fields.content)}
  />
</div>

<style>
  .clamp-text {
    font-size: clamp(1rem, 2.5vw, 1.7rem);
  }
  .rotate-from-left {
    animation: rotate-from-left 1s ease-out forwards;
  }
  .rotate-from-right {
    animation: rotate-from-right 1s ease-out forwards;
  }
  @keyframes rotate-from-left {
    0% {
      transform: rotate(30deg);
      transform-origin: 0 -50%;
    }
    100% {
      transform: rotate(0deg);
      transform-origin: 0 -50%;
    }
  }
  @keyframes rotate-from-right {
    0% {
      transform: rotate(-25deg);
      transform-origin: 0 -50%;
    }
    100% {
      transform: rotate(0deg);
      transform-origin: 0 -50%;
    }
  }
</style>

<script>
  const yellowCylinderObserver = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add("rotate-from-left");
      } else {
        entry.target.classList.remove("rotate-from-left");
      }
    });
  });
  const redEllipseObserver = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add("rotate-from-right");
      } else {
        entry.target.classList.remove("rotate-from-right");
      }
    });
  });
  yellowCylinderObserver.observe(document.querySelector(".yellow-cylinder")!);
  redEllipseObserver.observe(document.querySelector(".red-ellipse")!);
</script>
