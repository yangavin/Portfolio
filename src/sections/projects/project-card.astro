---
type Props = {
  project: {
    logo: string;
    techUsed: {
      logo: string;
      title: string;
      url: string;
    }[];
    title: string;
    projectUrl: string;
    description: string;
    repoUrl: string;
    hue: string;
  };
  mobile: boolean;
};
const {
  project: { logo, techUsed, title, projectUrl, description, repoUrl, hue },
  mobile,
} = Astro.props;
const colorFrom = `hsl(${hue}, 100%, 75%)`;
const colorTo = `hsl(${hue}, 100%, 95%)`;
---

<div
  class={`container px-[5%] pb-[2%] pt-4 opacity-0 blur-sm transition-all duration-700 border-2 border-gray-600 ${
    mobile ? "mobile-container" : ""
  } translate-y-44 `}
>
  <h1 class="title">{title}</h1>

  <div class="flex justify-end">
    <a
      href={projectUrl}
      title={`Launch ${title}`}
      target="_blank"
      class="w-[30%] duration-700 hover:-translate-y-1"
    >
      <img src="goto.svg" alt="Go-to-link image" srcset="" />
    </a>
  </div>

  <div class="description flex items-center">
    <div set:html={description} />
  </div>

  <div class="flex items-center">
    <img src={logo} alt="Project logo" srcset="" class="w-full" />
  </div>

  <div>
    <h2 class="built-with-title mb-2">Built with:</h2>
    <div class="flex gap-5">
      {
        techUsed.map((tech) => (
          <a
            href={tech.url}
            title={tech.title}
            class="w-[15%] transition-transform duration-700 hover:-translate-y-1"
            target="_blank"
          >
            <img src={tech.logo} alt={tech.title} srcset="" />
          </a>
        ))
      }
    </div>
  </div>

  <div class="flex items-end justify-end">
    <a
      href={repoUrl}
      title={`${title} repository`}
      target="_blank"
      class="w-[4.5vh] duration-700 hover:-translate-y-1"
    >
      <img src="github.svg" alt="GitHub Logo" srcset="" />
    </a>
  </div>
</div>

<style define:vars={{ colorTo, colorFrom }}>
  .slide-in {
    filter: blur(0px);
    opacity: 1;
    transform: translateX(0);
  }
  .container {
    border-radius: 0.4375rem;
    display: grid;
    grid-template-columns: 60% 1fr;
    column-gap: 3rem;
    grid-template-rows: 2rem 3fr 1fr;
    background: linear-gradient(
      to bottom right,
      var(--colorFrom),
      var(--colorTo) 70%
    );
  }
  .container:hover {
    transform: translateY(-10px);
  }
  .mobile-container {
    column-gap: 1rem;
    grid-template-rows: 2rem 2fr 1fr;
  }
  .title {
    font-size: clamp(1.2rem, 2vw, 2rem);
  }
  .description {
    font-size: clamp(0.7rem, 3vw, 1.1rem);
  }
  .built-with-title {
    font-size: clamp(0.2rem, 3vw, 1rem);
  }
</style>

<script>
  const projectCardObserver = new IntersectionObserver((projectCards) => {
    projectCards.forEach((projectCard) => {
      if (projectCard.isIntersecting) {
        projectCard.target.classList.add("slide-in");
      }
    });
  });
  const projectCards = document.querySelectorAll(".container");
  projectCards.forEach((projectCard) => {
    projectCardObserver.observe(projectCard);
  });
</script>
