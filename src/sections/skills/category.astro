---
type Props = {
  skills: {
    logo: string;
    title: string;
    url: string;
  }[];
  small?: boolean;
  language?: boolean;
};
const { skills, small, language } = Astro.props;
---

<div>
  <h2 class="mb-10 mt-10 text-center"><slot /></h2>
  <div
    class="container m-auto flex w-11/12 flex-wrap justify-center gap-x-7 gap-y-9 md:gap-x-16 md:gap-y-16"
  >
    {
      skills.map(({ logo, title, url }) => {
        return (
          <a
            href={url}
            class={`flex -translate-x-full flex-col items-center gap-2 opacity-0 blur-sm transition-all duration-300 ${
              small ? "small" : ""
            } ${language ? "md:w-40" : ""}`}
            target="_blank"
          >
            <img src={logo} alt={`${title} Logo`} class="drop-shadow-xl" />
            <span>{title}</span>
          </a>
        );
      })
    }
  </div>
</div>

<style>
  .slide-in {
    filter: blur(0px);
    opacity: 1;
    transform: translateX(0);
  }
  .hover-class:hover {
    transform: translateY(-10px);
  }
  h2 {
    font-size: clamp(1.5rem, 5vw, 3rem);
  }
  span {
    font-size: clamp(1rem, 2.5vw, 2.5rem);
  }
  img {
    width: clamp(3rem, 10vw, 7rem);
  }
  .small img {
    width: clamp(2rem, 7vw, 5rem);
  }
  .small span {
    font-size: clamp(1rem, 2vw, 2rem);
  }
</style>

<script>
  // At most one timeout per category at any given time
  const categoryContainerObserver = new IntersectionObserver(
    (categories) => {
      categories.forEach((category) => {
        const cards = category.target.children as HTMLCollectionOf<HTMLElement>;
        const longestDelaySeconds = (cards.length - 1) * 0.05;

        if (category.isIntersecting) {
          for (let i = 0; i < cards.length; i++) {
            cards[i].style.transitionDelay = `${i * 0.05}s`;
            cards[i].classList.add("slide-in");
          }
          setTimeout(
            () => {
              for (let i = 0; i < cards.length; i++) {
                cards[i].style.transitionDelay = "0s";
                cards[i].classList.add("hover-class");
              }
            },
            longestDelaySeconds * 1000 * 2,
          );
        }
      });
    },
    { threshold: 0.25 },
  );
  const containers = document.querySelectorAll(".container")!;
  containers.forEach((container) => {
    categoryContainerObserver.observe(container);
  });
</script>
